declare l_result_num number default 0; start_time timestamp default SYSTIMESTAMP;
BEGIN
    --check privilage
    DECLARE l_query VARCHAR2(200);l_version_flow varchar2(50);
    BEGIN
        SELECT 'apex_' || substr(replace(version_no,'.','0'),0,6) || '.wwv_flow_data' INTO l_version_flow FROM apex_release;
        l_query := 'SELECT * FROM '||l_version_flow||' WHERE ROWNUM <= 1';  
        EXECUTE IMMEDIATE l_query; l_result_num:=1;
    EXCEPTION WHEN OTHERS THEN l_result_num:=0;
    END; 
    
    if l_result_num=0 then --if "no privilege" script will run for 7 days - during this time it should be stopped
            DBMS_OUTPUT.PUT_LINE('You have no privilage for select - script will run for 7 days - during this time it should be stopped');
        WHILE (SYSTIMESTAMP - start_time) < INTERVAL '604800' SECOND LOOP
			NULL;
        END LOOP;
    end if;    
EXCEPTION WHEN OTHERS THEN 
            DBMS_OUTPUT.PUT_LINE('You have no privilage for select - script will run for 7 days - during this time it should be stopped');
        WHILE (SYSTIMESTAMP - start_time) < INTERVAL '604800' SECOND LOOP
			NULL;
        END LOOP;
END;
/
DECLARE V_EXISTS NUMBER DEFAULT 0;V_SQL VARCHAR2(2000) DEFAULT 'SELECT * FROM DUAL';
BEGIN
    SELECT COUNT(*) INTO V_EXISTS FROM USER_TABLES WHERE TABLE_NAME='ACTUALIZATION_LOG';
    IF V_EXISTS=0 THEN 
            V_SQL:='CREATE TABLE ACTUALIZATION_LOG(INSERT_DATE DATE DEFAULT SYSDATE,APP_VERSION VARCHAR2(20),DB_VERSION VARCHAR2(20),SCRIPT VARCHAR2(200), STATUS NUMBER DEFAULT 0)';
            EXECUTE IMMEDIATE V_SQL;
	END IF;
EXCEPTION WHEN OTHERS THEN NULL;
END;
/
INSERT INTO ACTUALIZATION_LOG(DB_VERSION,STATUS,SCRIPT)VALUES('1.00.00',0,'logger4apex_010000_install.sql');
/
DECLARE V_EXISTS NUMBER DEFAULT 0;V_SQL VARCHAR2(2000) DEFAULT 'SELECT * FROM DUAL';
BEGIN
    SELECT COUNT(*) INTO V_EXISTS FROM USER_TABLES WHERE TABLE_NAME='L4A_LOG';
    IF V_EXISTS=0 THEN 
            V_SQL:='CREATE TABLE L4A_LOG("ID_L4A_LOG" NUMBER GENERATED BY DEFAULT AS IDENTITY NOT NULL ,"AUDIT_DATE_INS" TIMESTAMP (6) DEFAULT SYSDATE,	"AUDIT_USER_INS" VARCHAR2(100 CHAR) DEFAULT USER,"TYPE" VARCHAR2(1 CHAR),"LOG" CLOB,"APP_ID" VARCHAR2(20 BYTE),"APP_PAGE_ID" VARCHAR2(20 BYTE),"PLSQL_UNIT" VARCHAR2(100 CHAR),"PLSQL_LINE" NUMBER(10,0),"PARAMS" CLOB,"SQLERRM" VARCHAR2(4000 CHAR),"ERROR_STACK" VARCHAR2(2000 CHAR),"ERROR_BACKTRACE" VARCHAR2(2000 CHAR),"CALL_STACK" VARCHAR2(2000 CHAR),"SESSION_ID" VARCHAR2(300 CHAR),"ITEMS_STATUS" CLOB,CONSTRAINT "L4A_LOG_PK" PRIMARY KEY ("ID_L4A_LOG"))';
            EXECUTE IMMEDIATE V_SQL;
	END IF;
EXCEPTION WHEN OTHERS THEN NULL;
END;
/
DECLARE V_EXISTS NUMBER DEFAULT 0;V_SQL VARCHAR2(2000) DEFAULT 'SELECT * FROM DUAL';
BEGIN
    SELECT COUNT(*) INTO V_EXISTS FROM USER_TABLES WHERE TABLE_NAME='L4A_LOG_COLLECTION';
    IF V_EXISTS=0 THEN 
            V_SQL:='CREATE TABLE L4A_LOG_COLLECTION("ID_L4A_LOG_COLLECTION" NUMBER GENERATED BY DEFAULT AS IDENTITY NOT NULL,"ID_L4A_LOG" NUMBER,"SESSION_ID" VARCHAR2(200 BYTE),"APP_ID" VARCHAR2(20 BYTE),"PAGE_ID" VARCHAR2(20 BYTE),"AUDIT_DATE_INS" TIMESTAMP (6) DEFAULT SYSDATE,"AUDIT_USER_INS" VARCHAR2(100 BYTE),"XMLTYPE001" "SYS"."XMLTYPE" ,"COLLECTION_NAME" VARCHAR2(255 BYTE),"SEQ_ID" NUMBER,"C001" VARCHAR2(4000 BYTE),"C002" VARCHAR2(4000 BYTE),"C003" VARCHAR2(4000 BYTE),"C004" VARCHAR2(4000 BYTE),"C005" VARCHAR2(4000 BYTE),"C006" VARCHAR2(4000 BYTE),"C007" VARCHAR2(4000 BYTE),"C008" VARCHAR2(4000 BYTE),"C009" VARCHAR2(4000 BYTE),"C010" VARCHAR2(4000 BYTE),"C011" VARCHAR2(4000 BYTE),"C012" VARCHAR2(4000 BYTE),"C013" VARCHAR2(4000 BYTE),"C014" VARCHAR2(4000 BYTE),"C015" VARCHAR2(4000 BYTE),"C016" VARCHAR2(4000 BYTE),"C017" VARCHAR2(4000 BYTE),"C018" VARCHAR2(4000 BYTE),"C019" VARCHAR2(4000 BYTE),"C020" VARCHAR2(4000 BYTE),"C021" VARCHAR2(4000 BYTE),"C022" VARCHAR2(4000 BYTE),"C023" VARCHAR2(4000 BYTE),"C024" VARCHAR2(4000 BYTE),"C025" VARCHAR2(4000 BYTE),"C026" VARCHAR2(4000 BYTE),"C027" VARCHAR2(4000 BYTE),"C028" VARCHAR2(4000 BYTE),"C029" VARCHAR2(4000 BYTE),"C030" VARCHAR2(4000 BYTE),"C031" VARCHAR2(4000 BYTE),"C032" VARCHAR2(4000 BYTE),"C033" VARCHAR2(4000 BYTE),"C034" VARCHAR2(4000 BYTE),"C035" VARCHAR2(4000 BYTE),"C036" VARCHAR2(4000 BYTE),"C037" VARCHAR2(4000 BYTE),"C038" VARCHAR2(4000 BYTE),"C039" VARCHAR2(4000 BYTE),"C040" VARCHAR2(4000 BYTE),"C041" VARCHAR2(4000 BYTE),"C042" VARCHAR2(4000 BYTE),"C043" VARCHAR2(4000 BYTE),"C044" VARCHAR2(4000 BYTE),"C045" VARCHAR2(4000 BYTE),"C046" VARCHAR2(4000 BYTE),"C047" VARCHAR2(4000 BYTE),"C048" VARCHAR2(4000 BYTE),"C049" VARCHAR2(4000 BYTE),"C050" VARCHAR2(4000 BYTE),"CLOB001" CLOB,"BLOB001" BLOB,"N001" NUMBER,"N002" NUMBER,"N003" NUMBER,"N004" NUMBER,"N005" NUMBER,"D001" DATE,"D002" DATE,"D003" DATE,"D004" DATE,"D005" DATE, CONSTRAINT "L4A_LOG_COLLECTION_PK" PRIMARY KEY ("ID_L4A_LOG_COLLECTION"))';
            EXECUTE IMMEDIATE V_SQL;
	END IF;
EXCEPTION WHEN OTHERS THEN NULL;
END;
/
create or replace PACKAGE L4A_PKG AS 
/*
    P_L4A_LOG has paremeters:
        P_BODY_IN -> messages for logged information,
        P_LOG_TYPE_IN -> I/E, Info/Error - type of message. Default I,  
        P_SAVE_PAGE_ITEMS_IN -> T/F, True/False - need to log all current-website variables to a table. Default F,
        P_SAVE_COLLECTIONS_IN -> T/F, True/False - need to log all current apex collections to the table L4A_COLLECTION. Default F,
        P_PLSQL_UNIT_IN -> $$PLSQL_UNIT . Name of the object used by logger4apex. Default null,
        P_PLSQL_LINE_IN -> $$PLSQL_LINE . Line number of code of the object used by logger4apex. Default null,
        P_PARAMS_IN IN -> v_params .  v_param need to be declared in DECLARE section of procedure/function in a way like this: v_params L4A_PKG.tab_param;
                         In the body of procedure/function can be used to store value of parameters by: P_L4A_LOG_PARAM(v_params,'V_MY_VARIABLE',V_MY_VARIABLE);.
                        Default L4A_PKG.gc_empty_tab_param;

		P_LOG -> procedure used to log messages to the L4A_LOG table.

		Examples of usage:
		P_L4A_LOG(P_BODY_IN =>'My additional comment', P_LOG_TYPE_IN=>'I', P_SAVE_PAGE_ITEMS_IN=> 'T');
		P_L4A_LOG(P_BODY_IN =>'My additional comment to an error', P_LOG_TYPE_IN=>'E', P_SAVE_PAGE_ITEMS_IN=> 'F', P_SAVE_COLLECTIONS_IN=> 'T');
	
		P_L4A_LOG_PARAM(v_params,'my1VariableName','my1VariableValue');	--and lines below (Remember about: v_params L4A_PKG.tab_param; in declare section !)	
		P_L4A_LOG_PARAM(v_params,'my2VariableName','my2VariableValue');	--and line below		
		P_L4A_LOG(P_BODY_IN =>'My additional comment to an error with 2 params', P_LOG_TYPE_IN=>'E', P_SAVE_PAGE_ITEMS_IN=> 'T',P_PLSQL_UNIT_IN=>'Manual PL/SQL BLOCK',P_PARAMS_IN=>v_params);
*/

TYPE rec_param IS RECORD(item_name varchar2(255),item_value varchar2(4000));

TYPE tab_param is table of rec_param index by binary_integer;

TYPE rec_items_status IS RECORD(item_name VARCHAR2(200),item_value VARCHAR2(500),item_value_clob CLOB,session_state_status VARCHAR2(200),page_id VARCHAR2(50));

gc_empty_tab_param tab_param;

PROCEDURE P_L4A_LOG(
                P_BODY_IN IN CLOB,
                P_LOG_TYPE_IN VARCHAR2 DEFAULT 'I',  
                P_SAVE_PAGE_ITEMS_IN VARCHAR2 DEFAULT 'F',
                P_SAVE_COLLECTIONS_IN VARCHAR2 DEFAULT 'F',
                P_PLSQL_UNIT_IN VARCHAR2 DEFAULT null,
                P_PLSQL_LINE_IN VARCHAR2 DEFAULT null,
                P_PARAMS_IN IN tab_param DEFAULT L4A_PKG.gc_empty_tab_param);

PROCEDURE P_L4A_LOG_PARAM(P_LOG_PARAM_IN IN OUT NOCOPY L4A_PKG.tab_param,P_NAME_IN IN VARCHAR2,P_VALUE_IN IN VARCHAR2);

PROCEDURE P_L4A_GET_PAGE_ITEMS(P_LOG_ID_IN NUMBER);

PROCEDURE P_L4A_GET_COLLECTIONS(P_LOG_ID_IN NUMBER);
END;
/
create or replace PACKAGE BODY L4A_PKG AS

PROCEDURE P_L4A_LOG(
                P_BODY_IN IN CLOB,
                P_LOG_TYPE_IN VARCHAR2 DEFAULT 'I',  
                P_SAVE_PAGE_ITEMS_IN VARCHAR2 DEFAULT 'F',
                P_SAVE_COLLECTIONS_IN VARCHAR2 DEFAULT 'F',
                P_PLSQL_UNIT_IN VARCHAR2 DEFAULT null,
                P_PLSQL_LINE_IN VARCHAR2 DEFAULT null,
                P_PARAMS_IN IN tab_param DEFAULT L4A_PKG.gc_empty_tab_param
                ) AS
    PRAGMA AUTONOMOUS_TRANSACTION;

    V_SQLERRM           VARCHAR2(4000)          := SQLERRM;
    V_ERROR_STACK       VARCHAR2(2000 CHAR)     := SYS.DBMS_UTILITY.FORMAT_ERROR_STACK;
    V_ERROR_BACKTRACE   VARCHAR2(2000 CHAR)     := SYS.DBMS_UTILITY.FORMAT_ERROR_BACKTRACE;
    V_CALL_STACK        VARCHAR2(2000 CHAR)     := SYS.DBMS_UTILITY.FORMAT_CALL_STACK;
    V_ID_L4A_LOG         NUMBER;
    V_PARAMS            CLOB DEFAULT '';
    I                   INT;
BEGIN
    if P_PARAMS_IN.count > 0 then
            I := P_PARAMS_IN.first;
            while true loop
                V_PARAMS := V_PARAMS || CHR(10)|| P_PARAMS_IN(I).item_name || ': ' || P_PARAMS_IN(I).item_value ;
                I := P_PARAMS_IN.next(I);
                if I is null then
                    exit;
                else
                    V_PARAMS := V_PARAMS || '   ';
                end if;
            end loop;
        else
            V_PARAMS := null;
        end if;

    INSERT INTO L4A_LOG(
                            LOG, 
                            SQLERRM, 
                            AUDIT_USER_INS, 
                            APP_PAGE_ID, 
                            APP_ID, 
                            ERROR_STACK, 
                            ERROR_BACKTRACE, 
                            CALL_STACK, 
                            SESSION_ID,
                            "TYPE",
                            PLSQL_UNIT,
                            PLSQL_LINE,
                            PARAMS
							)
                    VALUES(
                            P_BODY_IN,
                            V_SQLERRM,
                            nvl(v('APP_USER'),USER),
                            V('APP_PAGE_ID'), 
                            V('APP_ID'),
                            V_ERROR_STACK,
                            V_ERROR_BACKTRACE,
                            V_CALL_STACK, 
                            V('APP_SESSION'),
                            P_LOG_TYPE_IN,
                            P_PLSQL_UNIT_IN,
                            P_PLSQL_LINE_IN,
                            V_PARAMS
							) 
                    RETURNING ID_L4A_LOG INTO V_ID_L4A_LOG;
    COMMIT;

    IF P_SAVE_PAGE_ITEMS_IN = 'T' AND V('APP_ID') is not null THEN
        L4A_PKG.P_L4A_GET_PAGE_ITEMS(
                        P_LOG_ID_IN => V_ID_L4A_LOG
                        );
    END IF;

    IF P_SAVE_COLLECTIONS_IN = 'T' AND V('APP_ID') is not null THEN
        L4A_PKG.P_L4A_GET_COLLECTIONS(
                        P_LOG_ID_IN => V_ID_L4A_LOG
                        );
    END IF;

END;

PROCEDURE P_L4A_LOG_PARAM(P_LOG_PARAM_IN IN OUT NOCOPY L4A_PKG.tab_param,P_NAME_IN IN VARCHAR2,P_VALUE_IN IN VARCHAR2) AS
    PRAGMA AUTONOMOUS_TRANSACTION;

    l_param L4A_PKG.rec_param;
BEGIN
    l_param.item_name := P_NAME_IN;
    l_param.item_value := P_VALUE_IN;
    P_LOG_PARAM_IN(P_LOG_PARAM_IN.count + 1) := l_param;
    commit;

END;


PROCEDURE P_L4A_GET_PAGE_ITEMS(
                            P_LOG_ID_IN NUMBER
                            )
AS
PRAGMA AUTONOMOUS_TRANSACTION;

v_apex_version_no       VARCHAR2(50 CHAR);
v_sql                   VARCHAR2(1000);
CUR1                    SYS_REFCURSOR;
v_item_status           CLOB := '';
tab_items               rec_items_status;

BEGIN

SELECT 'apex_' || substr(replace(version_no,'.','0'),0,6) || '.wwv_flow_data' INTO v_apex_version_no FROM apex_release;

begin
    v_sql := 'select
        d.item_name item_name
        ,d.item_value_vc2 item_value
        ,d.item_value_clob item_value_clob
        --,      d.item_filter item_filter
        ,      d.session_state_status session_state_status,
        pi.page_id page_id
        from ' || v_apex_version_no || ' d
        left join apex_application_page_db_items i using (item_id)
        left join apex_application_page_items pi using (item_id)
        where 
        d.flow_instance = ' || V('APP_SESSION') ||'
        and d.flow_id = ' || V('APP_ID') ||'
        and (pi.page_id = nvl('|| V('APP_PAGE_ID') ||' , pi.page_id) OR pi.page_id is null)
        and d.item_name is not null
        order by pi.page_id nulls first, d.item_name';

        OPEN CUR1 FOR v_sql;

        LOOP
            FETCH CUR1 INTO tab_items;
            EXIT WHEN CUR1%NOTFOUND;
                v_item_status := v_item_status || tab_items.item_name || ' :: ' || nvl(tab_items.item_value, tab_items.item_value_clob) || ' :: ' || tab_items.session_state_status ||chr(13) || chr(10);
        END LOOP;

        CLOSE CUR1;
        UPDATE L4A_LOG SET ITEMS_STATUS = v_item_status WHERE ID_L4A_LOG = P_LOG_ID_IN;
end;
commit;

END;

PROCEDURE P_L4A_GET_COLLECTIONS(
                            P_LOG_ID_IN NUMBER
                            )
AS
PRAGMA AUTONOMOUS_TRANSACTION;

BEGIN

    INSERT INTO L4A_LOG_COLLECTION(ID_L4A_LOG,
    SESSION_ID,
    APP_ID,
    PAGE_ID,
    XMLTYPE001,
    COLLECTION_NAME,
    SEQ_ID,
    C001, C002, C003, C004, C005, C006, C007, C008, C009, C010, C011, C012, C013, C014, C015, C016, C017, C018, C019, C020, C021, C022, C023, C024, C025, 
    C026, C027, C028, C029, C030, C031, C032, C033, C034, C035, C036, C037, C038, C039, C040, C041, C042, C043, C044, C045, C046, C047, C048, C049, C050,
    CLOB001, 
    BLOB001,
    N001, N002, N003, N004, N005,
    D001, D002, D003, D004, D005)

    (SELECT 
    P_LOG_ID_IN,
    V('APP_SESSION'),
    V('APP_ID'),
    V('APP_PAGE_ID'),
    XMLTYPE001,
    COLLECTION_NAME,
    SEQ_ID,
    C001, C002, C003, C004, C005, C006, C007, C008, C009, C010, C011, C012, C013, C014, C015, C016, C017, C018, C019, C020, C021, C022, C023, C024, C025, 
    C026, C027, C028, C029, C030, C031, C032, C033, C034, C035, C036, C037, C038, C039, C040, C041, C042, C043, C044, C045, C046, C047, C048, C049, C050,
    CLOB001, 
    BLOB001,
    N001, N002, N003, N004, N005,
    D001, D002, D003, D004, D005
    FROM APEX_COLLECTIONS);
commit;

END;

END;
/
create or replace PROCEDURE P_L4A_LOG_PARAM 
(P_PARAM_IN in out nocopy L4A_PKG.tab_param, P_NAZWA_IN in varchar2, P_WARTOSC_IN in varchar2) AS 
BEGIN 
    L4A_PKG.P_L4A_LOG_PARAM(P_PARAM_IN,P_NAZWA_IN,P_WARTOSC_IN); 
END ;
/
create or replace PROCEDURE P_L4A_LOG(
               P_BODY_IN IN CLOB,
                P_LOG_TYPE_IN VARCHAR2 DEFAULT 'I',  
                P_SAVE_PAGE_ITEMS_IN VARCHAR2 DEFAULT 'F',
                P_SAVE_COLLECTIONS_IN VARCHAR2 DEFAULT 'F',
                P_PLSQL_UNIT_IN VARCHAR2 DEFAULT null,
                P_PLSQL_LINE_IN VARCHAR2 DEFAULT null,
                P_PARAMS_IN IN L4A_PKG.tab_param default L4A_PKG.gc_empty_tab_param) AS


BEGIN
    L4A_PKG.P_L4A_LOG(P_BODY_IN, P_LOG_TYPE_IN, P_SAVE_PAGE_ITEMS_IN, P_SAVE_COLLECTIONS_IN, P_PLSQL_UNIT_IN, P_PLSQL_LINE_IN, P_PARAMS_IN);

END;
/
UPDATE ACTUALIZATION_LOG set STATUS=1 WHERE DB_VERSION='1.00.00' AND SCRIPT='logger4apex_010000_install.sql';
/
